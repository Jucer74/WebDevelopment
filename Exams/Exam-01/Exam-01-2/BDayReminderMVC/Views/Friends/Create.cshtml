@model BDayReminderMVC.Models.Friend

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Friend</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" class="form-control" />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
               
                <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
                <style>
                    /* Puedes agregar estilos personalizados aquí si lo deseas */
                </style>
                <script>
                    function updateProgressBar() {
                        var selectedDate = new Date(document.getElementById("birthday").value);
                        var currentDate = new Date();

                        selectedDate.setFullYear(currentDate.getFullYear());

                        if (selectedDate < currentDate) {
                            selectedDate.setFullYear(currentDate.getFullYear() + 1);
                        }

                        var timeDifference = selectedDate.getTime() - currentDate.getTime();
                        var daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));

                        document.getElementById("daysRemaining").textContent = daysDifference;
                        document.getElementById("daysSlider").value = daysDifference;
                        document.getElementById("daysTextBox").value = daysDifference;
                    }
                </script>
            
           
                <div class="container mt-5">
                    

                    <div class="form-group">
                        <label asp-for="DateOfBirth" class="control-label"></label>
                        <input asp-for="DateOfBirth" class="form-control" id="birthday" onchange="updateProgressBar()" />
                        <span asp-validation-for="DateOfBirth" class="text-danger"></span>
                    </div>

                    <p class="mb-3">Faltan <span id="daysRemaining">0</span> días para tu cumpleaños.</p>

                    <div class="form-group">
                        <input type="range" class="form-control-range" id="daysSlider" min="0" max="365" value="0" step="1" onchange="updateProgressBar()">
                    </div>

                    <div class="form-group">
                        <input type="text" class="form-control" id="daysTextBox" readonly>
                    </div>
                </div>
            
        
            <div class="form-group">
                <label asp-for="Sex" class="control-label"></label>
                <div>
                    <div class="form-check form-check-inline">
                        <input asp-for="Sex" type="radio" class="form-check-input" value="male" id="maleRadio" />
                        <label class="form-check-label" for="maleRadio">Male</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input asp-for="Sex" type="radio" class="form-check-input" value="female" id="femaleRadio" />
                        <label class="form-check-label" for="femaleRadio">Female</label>
                    </div>
                </div>
                <span asp-validation-for="Sex" class="text-danger"></span>
            </div>

            <style>
                .relation-button {
                    margin-right: 5px; /* Espacio entre los botones de relación */
                    background-color: white; /* Fondo blanco */
                    color: #000; /* Color del texto negro */
                    border: 1px solid #ccc; /* Borde gris */
                }

                .relation-label {
                    display: inline-block;
                    margin-right: 5px; /* Espacio entre las etiquetas de relación */
                }

                /* Cambia el color de fondo de los botones seleccionados */
                .active {
                    background-color: #008080; /* Cambia este color según tus preferencias */
                    color: white; /* Cambia el color del texto a blanco */
                }

                .remove-button {
                    background-color: #ff0000; /* Color de fondo del botón Remove */
                    color: white; /* Color del texto del botón Remove */
                    border: none; /* Sin borde */
                    margin-left: 5px; /* Espacio entre el botón Remove y las relaciones seleccionadas */
                    cursor: pointer; /* Cambia el cursor al pasar el ratón por encima */
                }
            </style>

            <div class="form-group">
                <label asp-for="Relations" class="control-label">Relations</label>
                <div>
                    <div id="selectedRelations" class="mb-2">
                        <!-- Aquí se mostrarán las relaciones seleccionadas -->
                    </div>
                    <div id="customRelations" class="d-flex mb-2"></div> <!-- Contenedor para las nuevas etiquetas de relación -->

                    <div class="d-flex">
                        
   
                        <!-- Agrega más botones según sea necesario -->
                    </div>

                    <div class="d-flex mt-2">
                        <input type="text" id="customRelationInput" class="form-control mr-2" placeholder="Custom Relation">
                        <button type="button" class="btn btn-success" onclick="addCustomRelation()">Add Relation</button>
                        <button type="button" class="btn btn-danger remove-button ml-2" onclick="removeSelectedRelations()">Remove</button>
                    </div>
                </div>
                <input asp-for="Relations" id="relationsInput" type="hidden" />
                <span asp-validation-for="Relations" class="text-danger"></span>
            </div>

            <script>
                var selectedRelations = [];
                var selectedRelation; // Variable para mantener la relación seleccionada

                // Recuperar selecciones almacenadas al cargar la página
                var storedSelection = localStorage.getItem('selectedRelations');
                if (storedSelection) {
                    selectedRelations = JSON.parse(storedSelection);
                    updateSelectedRelations();
                }

                function selectRelation(relation) {
                    var buttons = document.querySelectorAll('.btn.relation-button');
                    buttons.forEach(function (button) {
                        button.classList.remove('active'); // Quita la clase 'active' de todos los botones
                    });

                    var selectedButton = document.querySelector('button[data-relation="' + relation + '"]');
                    selectedButton.classList.add('active'); // Agrega la clase 'active' al botón seleccionado
                    selectedRelation = relation; // Actualiza la relación seleccionada

                    var relationsInput = document.getElementById('relationsInput');
                    relationsInput.value = relation;

                    // Guardar la selección en el almacenamiento local
                    localStorage.setItem('selectedRelations', JSON.stringify(selectedRelations));
                }

                function addCustomRelation() {
                    var customRelationInput = document.getElementById('customRelationInput');
                    var customRelation = customRelationInput.value.trim();

                    if (customRelation) {
                        selectedRelations.push(customRelation);
                        customRelationInput.value = ''; // Limpia el input
                        updateSelectedRelations();

                        // Guardar la selección en el almacenamiento local
                        localStorage.setItem('selectedRelations', JSON.stringify(selectedRelations));
                    }
                }

                function updateSelectedRelations() {
                    var customRelationsDiv = document.getElementById('customRelations');
                    customRelationsDiv.innerHTML = '';

                    // Etiquetas de relación seleccionadas
                    selectedRelations.forEach(function (relation) {
                        var button = document.createElement('button');
                        button.type = 'button';
                        button.className = 'btn relation-button';
                        button.innerText = relation;
                        button.setAttribute('data-relation', relation);
                        button.addEventListener('click', function () {
                            selectRelation(relation); // Al hacer clic, selecciona la etiqueta
                        });

                        customRelationsDiv.appendChild(button);
                    });

                    relationsInput.value = selectedRelations.join(', '); // Actualiza el valor oculto
                }

                function removeSelectedRelations() {
                    if (selectedRelation) {
                        var index = selectedRelations.indexOf(selectedRelation);
                        if (index !== -1) {
                            selectedRelations.splice(index, 1);
                            updateSelectedRelations();

                            // Guarda la selección actualizada en el almacenamiento local
                            localStorage.setItem('selectedRelations', JSON.stringify(selectedRelations));
                        }
                    }
                }
            </script>

            






            <div class="form-group">
                <label asp-for="Photo" class="control-label"></label>
                <input asp-for="Photo" class="form-control" />
                <span asp-validation-for="Photo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PhotoData" class="control-label"></label>
                <input asp-for="PhotoData" type="file" class="form-control" accept="image/*">
                <span asp-validation-for="PhotoData" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
                <a class="btn btn-secondary" asp-action="Index">Cancel</a>
            </div>
            
        </form>
    </div>
</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
